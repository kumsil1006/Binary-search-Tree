
#include <iostream>
using namespace std;
// node class
class Node {
public:
	Node(int d) {
		data = d;
		parent = left = right = NULL;
	}
	int data;
	Node* parent;
	Node* left;
	Node* right;
};
// binary search tree class
class BST {
public:
	BST() {
		root = NULL;
	}
	// 삽입 -> main에서 두번째 파라미터로 root를 사용한다
	void insert(int n, Node* node) {
		Node* newNode = new Node(n);
		// node가 비었다면 -> root가 없다는 뜻!
		if (node == NULL)
			root = newNode;
		
		// binary search tree 특성상, 더 작은 데이터가 왼쪽에 배치된다.
		else if (n < node->data)
			if (node->left == NULL) {
				node->left = newNode;
				newNode->parent = node;
				return;
			}
			else insert(n, node->left);
		else {
			if (node->right == NULL) {
				node->right = newNode;
				newNode->parent = node;
				return;
			}
			else insert(n, node->right);
		}
	}
	// 탐색
	void find(int n, Node* node) {
		if (node == NULL) {
			cout << 0 << '\n';
			return;
		}
		else if (n == node->data) {
			cout << 1 << '\n';
			return;
		}
		else if (n < node->data)
			find(n, node->left);
		else
			find(n, node->right);
	}
	Node* root;
};
int main()
{
	// c++에서 시간 초과 에러를 잡기 위해 다음과 같은 코드를 꼭 사용해야 한다.
	// 혹은 printf, scanf_s 를 사용하도록 한다.
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);


	int n;
	cin >> n;
	BST T;
	while (n--) {
		int num;
		cin >> num;
		T.insert(num, T.root);
	}

	int t;
	cin >> t;
	while (t--) {
		int num;
		cin >> num;
		T.find(num, T.root);
	}
}
